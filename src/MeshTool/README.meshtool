MeshTool Instructions and Release Notes

Version History
	4/30/08    Beta 2
	3/11/08    Beta 1
	12/28/07   Initial Draft

Version 1.1 Changes
	- Shapefiles
	- New orthophoto commands
	- Polygon cutting improvement
	- Relaxed boundary issues
	- Shapefile support
	- Improved command syntax

TODO - doc this more

-------------------------------------------------------------------------------
USAGE
-------------------------------------------------------------------------------

MeshTool <script file> <climate file> <DEM file> <dump directory> <output file>

MeshTool converts a polygon script, climate digest and DEM folder into a base
DSF mesh.  It supports customizing coastlines via vector polygon data,
burning in airporst, and adding custom orthophotos.

-------------------------------------------------------------------------------
DEM FILE FORMAT
-------------------------------------------------------------------------------

MeshTool can accept two DEM formats:

* ".hgt" format - this is the format that SRTM DEMs are published in by JPL.
  The file contains a 1201x1201 array of 16-bit big endian elevations in
  geographic projection.
  
* GeoTiff - the GeoTiff file should be 16-bit.

In both cases, the DEM must be geographic projection, and pre-cropped to the
bounds of the DSF tile, with no missing data or voids.  You are responsible
for all flattening and conditioning.  (For example, you must flatten the
area over airports - MeshTool will not do this.)
	 
-------------------------------------------------------------------------------
SCRIPT FILE FORMAT (POLYGON FILE)
-------------------------------------------------------------------------------

The MeshTool script file contains a series of instructions for defining
landuses via vector data and overlaying orthophotos.  Land use areas are
defined by polygon lat/lon coordinates.  

X-Plane has four fundamental land-use types (defined by vectors):

- Water: forms "real" X-plane water, with reflections, wet physics 
  interactions, etc.
- Natural Land: builds terrain using X-Plane's built-in global scenery
  land classes; the land use is selected based on the slope of the DEM and
  climate data from the .xes file (see below).
- Airport: builds airport surface areas, with the grass type varying with
  climate.  Note that the airport land use type is not flattened!
- Orthophoto: puts in a custom-defined orthophoto, which can optionally
  show water behind the alpha channel.
  
When working with terrain, you can use the names terrain_Water, 
terrain_Natural, and terrain_Airport for water, natural, and airport
land-use, respectively.
 
Land uses are layered - with the later land uses in the file overlapping 
the earlier ones.  For example, you can create a single polygon covering
the entire DSF tile with water, then a polygon representing an island, then
another polygon representing a lake inside the island.  The layer ordering
will correctly create the water/land/water pattern desired.  (You could also
set the tile to water and then create the island as a land polygon with a
hole.)

Individual Polygons input to MeshTool should be simple (the mathematical
definition of a "simple polygon") meaning the edges of the polygon
should not overlap each other or intersect each other, except at the
ends of adjacent edges.  For example, a bow-tie pattern is not a valid 
polygon, whether made with 4 or 5 vertices.  (The bow-tie can be modeled 
by two triangles meeting at a point - there is no restriction on polygons
overlapping, intersecting, etc.)
 
Individual holes must also be simple polygons, and should not overlap their
outer boundaries.

There is no restriction on the relationship of individual simple polygons
with each other.  You can overlap, layer, or stack individual polygons against
each other in any way.
 
-------------------------------------------------------------------------------
COMMANDS FOR SETTING LANDUSE
-------------------------------------------------------------------------------

These commands let you define the water and land areas of your DSF tile.
Even if you are covering the entire tile with orthophotos, you may still want
to use the water terrain type to have "real" physics where there is water.

SHAPEFILE_TERRAIN <terrain> <file>

Sets the area defined by the shapefile to the specified terrain.  The 
shapefile must contain polygons.

BEGIN_POLYGON <terrain>

Begin specifying a polygon's outer boundary by points.

POLYGON_POINT <lon> <lat>

Specify one point on the polygon's outer boundary.

END_POLY

End specifying a polygon.  All holes must be finished before the polygon
ends.

BEGIN_HOLE

Begin specifying a hole inside the current polygon.  Holes must be specified
between a polygon begin/end.

HOLE_POINT <lon> <lat>

Specify a point on the hole's boundary.

END_HOLE

End specification of the current hole.

-------------------------------------------------------------------------------
COMMANDS FOR WORKING WITH ORTHOPHOTOS
-------------------------------------------------------------------------------

When you import an orthophoto, it covers the land uses that are already 
specified.  You can then specify additional land-uses on top of it; 
orthophotos can also overlap each other.

Orthophotos do not have to be fully inside a mesh tile - if they are not,
their polygon placement is cropped automatically (but the image file is not).
The orthophoto will be stretched as needed based on the coordinates specified.

ORTHOPHOTO <bl> <br> <tr> <tl> <wet> <filename>

This imports a single orthophoto - <filename> should be the name of the .ter
file - if one does not exist, it is created.  The "wet" flag tells whether
to put water under the orthophoto - if you want to use alpha as water, set
this to 1.  The four coordinates are the lon/lat pairs of the image
corners, starting with the lower elft corner of the image and going 
around counter-clockwise.

Example:

ORTHOPHOTO -72.0 42.0 -71.0 42.0 -71.0 43.0 -72.0 43.0 0 foo.ter

Covers the entire +42-072.dsf tile with an ortho called "foo.ter", such 
that the top of the photo is north and right side is east, and there is 
no "water" behind it.

GEOTIFF <wet> <filename>

This imports a single .tif image - its location in the file is placed based on
the coordinates inside the .tif file.  A .ter of the same name is created
(if it doesn't exist) for your convenience.

Warning: PhotoShop and some other programs will remove the location 
inforamtion from TIF files when it saves them.  Make sure to specify a TIF
image that has not had its coordinates stripped!

QMID <wet> <qmid id>

Note: this command is intended for MSFS scenery developers who already have
orthophotos cut into QMID tiles.

Given a QMID (quad-mesh identifier), this command places an orthophoto whose
.ter file is <qmid>.ter at the location specified by the qmid.  If  a .ter 
file does not exist, a .ter file is created for your convenience.

-------------------------------------------------------------------------------
ADVANCED COMMANDS
-------------------------------------------------------------------------------

BACKGROUND terrain

The background command sets the entire DSF tile to a single terrain.  This can
be used to "start" a DSF as all land or all water.

The advantage of the background command is that it takes its coordinates from
the passed in DEM; by using the background command and a single shapefile
(containing water for many tiles), you can use a single script to build 
multiple DSF tiles.

BEGIN_LAYER
END_LAYER

The begin/end layer properties start a group of polygons.  Inside the layer,
only the polygon commands may be used (not shapefiles or orthophotos).  Every
polygon inside the layer must be of the same terrain type.

Unlike individual polygons, polygons inside the begin/end layer should
not overlap in their interios (but can share edges).  If the polygons in a
layer overlap, the resulting map may not come out the same as if the layer
had no been used.

The advantage of layers is processing speed.  If you are defining a large
number of non-overlapping polygons of the same terrain type, using a layer
might be significantly faster than not using one.  (A layer is no faster than
using a single shapefile.)

DEFINE_CUSTOM_TERRAIN wet name
PROJECT_POINT lon lat s t

These commands define a terrain type based on an orthophoto.  Unlike the
orthophoto command, these commands define the terain type but don't use it;
use POLYGON_BEGIN with the terrain name to then make several polygons that
use the terrain type.

After DEFINE_CUSTOM_TERRAIN you will need to specify four PROJECT_POINT
lines that define the corners of th bitmap as "ST" (texture) coordinates
and lat-lon.  The S coordinate is the horizontal position of the texture (0 is
the left side, 1 is the right), and T is the vertical position of the
texture (0 is the bottom, 1 is the top).

Important: make sure that no polygon coordinates for the custom terrain are
outside the bounds of the PROJECT_POINT quadrangle.

-------------------------------------------------------------------------------
LEGACY COMMANDS
-------------------------------------------------------------------------------

LAND_POLY
WATER_POLY
APT_POLY
CUSTOM_POLY terrain

These commands act the same as POLYGON_BEGIN - with land/water/apt_poly, you
don't need to specify the terrain type.

-------------------------------------------------------------------------------
EXAMPLE:
-------------------------------------------------------------------------------

BACKGROUND terrain_Natural

SHAPEFILE_TERRAIN terrain_Water my_water.shp

GEOTIFF 0 my_ortho.tiff
QMID 1 210332123

-------------------------------------------------------------------------------
CLIMATE FILES
-------------------------------------------------------------------------------

MeshTool requires a climate/landuse digest in .xes format.  .xes is a GIS 
container format used by Laminar Research for imported data.  You must download
a .xes file for your DSF tile from Laminar Research and pass it as input to
MeshTool.  

Climate/landuse digest files can be fetched here:

http://update.x-plane.com/MeshTool/

They are stored in groups of up to 100 files, numbered by the latitude and
longitude of the southwest corner of the 10x10 square.

-------------------------------------------------------------------------------
DUMP DIRECTORY
-------------------------------------------------------------------------------

MeshTool requires a directory that contains sub-folders (e.g. +30-120) for any
DSF tile you generate.  MeshTool places .txt files that describe the borders
of the DSF tile into these sub-directories.  If you don't have a dump directory
with sub-folders, MeshTool will fail.

MeshTool also reads the borders, so if you render two adjacent tiles, the 
borders will be coordinated.  It does not matter what order you render your
tiles in, as long as they are rendered one at a time.

WARNING: if you make two adjacent tiles and the polygon definitions at the 
border do not match up (e.g. the border has water on one side and land on the
other) the results may be unpredictable.


-------------------------------------------------------------------------------
VERSION HISTORY
-------------------------------------------------------------------------------

BETA 2
- Fixed: clamping of ST coordinates (caused "could not sink vertex".)
- Fixed: multiple custom terrain types export correctly.